/** * ObjectBinaryTree.java * @author Aditi Datta */public class ObjectBinaryTree implements ObjectBinaryTreeInterface {    private ObjectTreeNode root;    /**     * Creates an empty tree      */    public ObjectBinaryTree() {        root = null;    }    /**     * Returns the root node of the tree     * @return ObjectTreeNode     */    public ObjectTreeNode getRoot() {        return root;    }    /**     * Sets the left child to the parent     * @param parent ObjectTreeNodeInterface     * @param r ObjectTreeNodeInterface     */    public void setLeftChild(ObjectTreeNodeInterface parent,                             ObjectTreeNodeInterface r) {        if (parent == null || parent.getLeft() != null) {            System.out.println("Runtime Error: setLeftChild()");            System.exit(1);        }        parent.setLeft(r);    }    /**     * Sets the left child to the parent     * @param parent ObjectTreeNodeInterface     * @param r ObjectTreeNodeInterface     */    public void setRightChild(ObjectTreeNodeInterface parent,                              ObjectTreeNodeInterface r){        if (parent == null || parent.getRight() != null) {            System.out.println("Runtime Error: setRightChild()");            System.exit(1);        }        parent.setRight(r);    }    /**     * Inserts an object into the BST.     * @param o Object - Base class must implement TreeComparable     */    public void insertBST(Object o) {        ObjectTreeNode p, q;                        ObjectTreeNode r = new ObjectTreeNode(o);        if (root == null)            root = r;        else {            p = root;            q = root;            while (q != null) {                p = q;                if (((TreeComparable)(r.getInfo())).compareTo((TreeComparable)(p.getInfo())) < 0 )                    q = p.getLeft();                else                    q = p.getRight();            }            if (((TreeComparable)(r.getInfo())).compareTo((TreeComparable)(p.getInfo())) < 0)                setLeftChild(p, r);            else                setRightChild(p, r);        }    }    /**     * Inserts an object into the BST and handles duplicates.     * @param o Object - Base class must implement TreeComparable     */    public void insertBSTDup(Object o) {        ObjectTreeNode p, q;                        ObjectTreeNode r = new ObjectTreeNode(o);        if (root == null)            root = r;        else {            p = root;            q = root;            while (q != null && ((TreeComparable)(r.getInfo())).compareTo((TreeComparable)(p.getInfo())) != 0) {                p = q;                if (((TreeComparable)(r.getInfo())).compareTo((TreeComparable)(p.getInfo())) < 0)                    q = p.getLeft();                else                    q = p.getRight();            }            if (((TreeComparable)(r.getInfo())).compareTo((TreeComparable)(p.getInfo())) < 0)                setLeftChild(p, r);            else if (((TreeComparable)(r.getInfo())).compareTo((TreeComparable)(p.getInfo())) > 0)                setRightChild(p, r);            else ((TreeComparable)(p.getInfo())).operate((TreeComparable)(r.getInfo()));        }    }    /**     * Searches for a word in the BST.     * @param o Object - Base class must implement TreeComparable     * @return ObjectTreeNode     */    public ObjectTreeNode searchBST(Object o) {        ObjectTreeNode p;                        ObjectTreeNode r = new ObjectTreeNode(o);        if(root != null) {            p = root;            while (p != null) {                if (((TreeComparable)(r.getInfo())).compareTo((TreeComparable)(p.getInfo())) < 0)                    p = p.getLeft();                else if (((TreeComparable)(r.getInfo())).compareTo((TreeComparable)(p.getInfo())) > 0)                    p = p.getRight();                else                     return p;            }        }        return null;    }    /**     * Prints out the tree using Pre-order traversal     * @param tree ObjectTreeNodeInterface     */    public void preTrav(ObjectTreeNodeInterface tree) {        if (tree != null) {            ((TreeComparable)tree.getInfo()).visit();            preTrav(tree.getLeft());            preTrav(tree.getRight());        }    }    /**     * Prints out the tree using In-order traversal     * @param tree ObjectTreeNodeInterface     */    public void inTrav(ObjectTreeNodeInterface tree) {        if (tree != null) {            inTrav(tree.getLeft());            ((TreeComparable)tree.getInfo()).visit();            inTrav(tree.getRight());        }    }    /**     * Prints out the tree using Post-order traversal     * @param tree ObjectTreeNodeInterface     */    public void postTrav(ObjectTreeNodeInterface tree) {        if (tree != null) {            postTrav(tree.getLeft());            postTrav(tree.getRight());            ((TreeComparable)tree.getInfo()).visit();        }    }}